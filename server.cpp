#include <iostream>
#include <asio.hpp>
#include <thread>
#include <unordered_map>
#include <mutex>
#include <nlohmann/json.hpp>

using asio::ip::tcp;
using json = nlohmann::json;

std::unordered_map<std::string, std::shared_ptr<tcp::socket>> clients;
std::unordered_map<std::string, std::vector<unsigned char>> public_keys;
std::mutex clients_mutex;

std::vector<unsigned char> hex_to_bytes(const std::string& hex) {
    std::vector<unsigned char> bytes;
    for (size_t i = 0; i < hex.length(); i += 2) {
        std::string byte_string = hex.substr(i, 2);
        unsigned char byte = static_cast<unsigned char>(strtol(byte_string.c_str(), nullptr, 16));
        bytes.push_back(byte);
    }
    return bytes;
}

std::string to_hex(const unsigned char* data, size_t len) {
    static const char hex_chars[] = "0123456789abcdef";
    std::string hex;
    hex.reserve(len * 2);
    for (size_t i = 0; i < len; ++i) {
        hex.push_back(hex_chars[(data[i] >> 4) & 0xF]);
        hex.push_back(hex_chars[data[i] & 0xF]);
    }
    return hex;
}

void handle_client(std::shared_ptr<tcp::socket> socket) {
    try {
        char data[2048];

        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è, –∞–¥—Ä–µ—Å–∞—Ç–∞ –∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
        std::size_t len = socket->read_some(asio::buffer(data));
        std::string received(data, len);
        json data_json = json::parse(received);

        std::string name = data_json["name"];
        std::string address = data_json["address"];
        std::string hex_pub_key = data_json["public_key"];
        std::vector<unsigned char> public_key = hex_to_bytes(hex_pub_key);

        {
            std::lock_guard<std::mutex> lock(clients_mutex);
            clients[name] = socket;
            public_keys[name] = public_key;

            if (public_keys.count(address)) {
                // –û—Ç–ø—Ä–∞–≤–∏–º –∞–¥—Ä–µ—Å–∞—Ç—É –Ω–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
                json notify_to_recipient = {
                    {"type", "key_exchange"},
                    {"from", name},
                    {"public_key", hex_pub_key}
                };
                asio::write(*clients[address], asio::buffer(notify_to_recipient.dump()));

                // –û—Ç–ø—Ä–∞–≤–∏–º –Ω–∞–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∞–¥—Ä–µ—Å–∞—Ç–∞
                json notify_to_us = {
                    {"type", "key_exchange"},
                    {"from", address},
                    {"public_key", to_hex(public_keys[address].data(), public_keys[address].size())}
                };
                asio::write(*socket, asio::buffer(notify_to_us.dump()));
            }
        }

        std::cout << "[+] " << name << " –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å " << address << "\n";

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        for (;;) {
            len = socket->read_some(asio::buffer(data));
            std::string message(data, len);

            std::lock_guard<std::mutex> lock(clients_mutex);
            if (clients.count(address)) {
                asio::write(*clients[address], asio::buffer(message));
                std::cout << "[>] –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ" << message <<" –æ—Ç " << name << " –∫ " << address << "\n";
            } else {
                json error_msg = {
                    {"type", "error"},
                    {"message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + address + " –Ω–µ –≤ —Å–µ—Ç–∏"}
                };
                asio::write(*socket, asio::buffer(error_msg.dump()));
            }
        }

    } catch (std::exception& e) {
        std::cerr << "[-] –û—à–∏–±–∫–∞/–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: " << e.what() << "\n";
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
    {
        std::lock_guard<std::mutex> lock(clients_mutex);
        for (auto it = clients.begin(); it != clients.end();) {
            if (it->second == socket) {
                std::cout << "[!] –ö–ª–∏–µ–Ω—Ç " << it->first << " –æ—Ç–∫–ª—é—á–∏–ª—Å—è\n";
                public_keys.erase(it->first);
                it = clients.erase(it);
            } else {
                ++it;
            }
        }
    }
}

int main() {
    try {
        asio::io_context io_context;
        tcp::acceptor acceptor(io_context, tcp::endpoint(tcp::v4(), 12345));

        std::cout << "üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 12345\n";

        for (;;) {
            auto socket = std::make_shared<tcp::socket>(io_context);
            acceptor.accept(*socket);
            std::thread(handle_client, socket).detach();
        }

    } catch (std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " << e.what() << std::endl;
    }

    return 0;
}
